---
interface Props {
  values: {
    label: string;
    value: string;
    href?: string;
    internal?: boolean;
  }[];
}

const { values } = Astro.props;
---

<div class="col gap-xs">
  {
    values.map(({ label, value, href, internal }) => {
      const arrayOfValues = value.split(" • ");

      return (
        <p class="row gap-xs font-size-s">
          <span class="flex-1">{label}</span>

          <span class="flex-1">
            {href ? (
              <a
                href={href}
                rel={!internal ? "noopener noreferrer" : undefined}
                target={!internal ? "_blank" : undefined}
              >
                {value}
              </a>
            ) : (
              arrayOfValues.map((val, i) => (
                <span>
                  {i !== 0 && <span class="color-tertiary"> • </span>}
                  {val}
                </span>
              ))
            )}
          </span>
        </p>
      );
    })
  }
</div>

<style>
  p {
    animation: appear 0.1s var(--bezier) both;
  }

  p:nth-child(1) {
    animation-delay: 0.3s;
  }
  p:nth-child(2) {
    animation-delay: 0.35s;
  }
  p:nth-child(3) {
    animation-delay: 0.4s;
  }
  p:nth-child(4) {
    animation-delay: 0.45s;
  }
  p:nth-child(5) {
    animation-delay: 0.5s;
  }
  p:nth-child(6) {
    animation-delay: 0.55s;
  }
  p:nth-child(7) {
    animation-delay: 0.6s;
  }
  p:nth-child(n + 8) {
    animation-delay: 0.65s;
  }

  p > span:nth-child(1) {
    text-transform: uppercase;
  }

  a {
    color: var(--on-surface);
  }
  a:hover {
    color: var(--background);
    background-color: var(--on-surface);
  }

  @media (max-width: 512px) {
    div {
      gap: 32px;
    }

    p {
      flex-direction: column;
    }
  }
</style>
