---
interface Props {
  values: {
    label: string;
    value: string;
    href?: string;
  }[];
}

const { values } = Astro.props;
---

<div class="col gap-xs">
  {
    values.map(({ label, value, href }) => {
      return (
        <p class="flex-1 row gap-xs">
          <span class="flex-1">{label}</span>

          <span class="flex-1">
            {href ? (
              <a href={href} rel="noopener noreferrer" target="_blank">
                {value}
              </a>
            ) : (
              value
            )}
          </span>
        </p>
      );
    })
  }
</div>

<style>
  p {
    font-size: var(--unit-s);
    text-align: start;
    animation: appear 0.3s var(--bezier) both;
  }

  p:nth-child(1) {
    animation-delay: 0.3s;
  }
  p:nth-child(2) {
    animation-delay: 0.35s;
  }
  p:nth-child(3) {
    animation-delay: 0.4s;
  }
  p:nth-child(4) {
    animation-delay: 0.45s;
  }
  p:nth-child(5) {
    animation-delay: 0.5s;
  }
  p:nth-child(6) {
    animation-delay: 0.55s;
  }
  p:nth-child(7) {
    animation-delay: 0.6s;
  }
  p:nth-child(n + 8) {
    animation-delay: 0.65s;
  }

  a {
    text-decoration: underline;
    text-underline-offset: 6px;
  }
  a:hover {
    color: var(--accent);
  }

  a svg {
    width: 8px;
    height: 8px;
    stroke: var(--outline);
  }
  a:hover svg {
    transform: translate(4px, -4px);
    stroke: var(--accent);
  }

  p > * {
    min-width: 200px;
  }

  @media (max-width: 512px) {
    div {
      gap: 32px;
    }

    p {
      flex-direction: column;
    }
  }
</style>
