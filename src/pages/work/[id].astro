---
import { type CollectionEntry, getCollection } from "astro:content";
import NewLayout from "../../layouts/NewLayout.astro";
import { Image } from "astro:assets";
import getImageMetadata from "../../helpers/getImageMetadata";
import { render } from "astro:content";
import moment from "moment";

export async function getStaticPaths() {
  const posts = await getCollection("work");
  return posts.map((post) => ({
    params: { id: post.id },
    props: post,
  }));
}

type Props = CollectionEntry<"work">;

const post = Astro.props;

const { Content } = await render(post);
---

<NewLayout>
  <article>
    <section>
      <div id="chip">
        Case study â€¢ {moment(post.data.date).format("YYYY")}
      </div>
      <h1>{post.data.title}</h1>
      <p>
        {
          post.data.longDescription.map((l, i) => (
            <span>
              {l}
              {i < post.data.longDescription.length - 1 && (
                <>
                  <br />
                  <br />
                </>
              )}
            </span>
          ))
        }
      </p>
    </section>

    {
      post.data.sections.map((s) => {
        if (s.title || s.text) {
          return (
            <section>
              {s.title && <h2>{s.title}</h2>}

              {s.text && (
                <p>
                  {s.text.map((line, i) => (
                    <span>
                      {line}
                      {i < s.text.length - 1 && (
                        <>
                          <br />
                          <br />
                        </>
                      )}
                    </span>
                  ))}
                </p>
              )}
            </section>
          );
        }

        if (s.image) {
          return (
            <section class="wide">
              <Image
                src={getImageMetadata(s.image.src)()}
                alt={""}
                width={2566}
                layout="responsive"
                loading="lazy"
              />
            </section>
          );
        }
      })
    }

    <Content />
  </article>
</NewLayout>

<style>
  article {
    width: 100%;
    display: flex;
    align-items: center;
    flex-direction: column;
    gap: var(--unit-2xl);
  }

  section {
    display: flex;
    flex-direction: column;
    width: 100%;
    max-width: calc(var(--unit-m) * 22 + var(--unit-l) * 2);
    gap: var(--unit-l);
    padding: 0 var(--unit-l);
    align-items: flex-start;
  }

  section.wide {
    max-width: none;
    padding: 0;
  }

  section.wide img {
    width: 100%;
  }

  section #chip {
    display: flex;
    background-color: var(--on-surface);
    color: var(--background);
    font-size: var(--unit-s);
    padding: var(--unit-3xs);
    border-radius: var(--unit-3xs);
  }

  h1,
  h2 {
    line-height: 1;
  }

  h1 {
    font-size: var(--unit-xl);
  }

  h2 {
    font-size: var(--unit-l);
  }

  p {
    font-size: var(--unit-s);
    line-height: 1.2;
    color: var(--on-surface-var);
    text-rendering: balanced;
  }
</style>
